/////////////////////////////////////////////////////////////////////////////////
//                                                                             //
//               Copyright (C) 2011-2025 - The DESY CMS Group                  //
//                           All rights reserved                               //
//                                                                             //
//      The CMStkModLab source code is licensed under the GNU GPL v3.0.        //
//      You have the right to modify and/or redistribute this source code      //
//      under the terms specified in the license, which may be found online    //
//      at http://www.gnu.org/licenses or at License.txt.                      //
//                                                                             //
/////////////////////////////////////////////////////////////////////////////////

#ifndef APPLICATIONCONFIG_H
#define APPLICATIONCONFIG_H

#include <string>
#include <sstream>
#include <map>
#include <vector>
#include <array>
#include <iomanip>

#include <QObject>
#include <QString>
#include <QVariant>
#include <QMessageBox>

/** @addtogroup common
 *  @{
 */

namespace Config {
  extern const std::string CMSTkModLabBasePath;
}

class ApplicationConfig : public QObject
{
  Q_OBJECT
public:

    class InvalidConfigFileException : public std::exception
    {
    private:
      std::string message;
    public:
      InvalidConfigFileException(std::string msg) : message(std::move(msg)) {}
      const char * what () {return message.c_str();}
    };

  struct FullKey {
    std::string filename;
    std::string alias;
    std::string key;
  };

  struct ShortKey {
    std::string alias;
    std::string key;
  };
  
  typedef std::map<FullKey,std::vector<std::string>,std::less<>> storage_t;

  static ApplicationConfig* instance(QObject *parent = 0);
  static ApplicationConfig* instance(const std::string filename,
    const std::string alias, QObject *parent = 0);

  void append(const std::string& filename, const std::string& alias);

  bool hasKey(const ShortKey& sk) const
  {
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) return true;
    return false;
  }

  [[deprecated("Use hasKey(const ShortKey& sk) or hasKey(const std::string& alias, const std::string& key) instead.")]]
  bool hasKey(const std::string& key) const
  {
    ShortKey sk = { "*", key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) return true;
    return false;
  }

  bool hasKey(const std::string& alias, const std::string& key) const
  {
    ShortKey sk = { alias, key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) return true;
    return false;
  }

  template <class aType>
  aType getValue(const ShortKey& sk) const
  {
    aType returnValue = 0;
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      std::istringstream iss(it->second.front().c_str(), std::istringstream::in);
      iss >> returnValue;
    } else {
      issueKeyError(sk);
    }
    return returnValue;
  }

  template <class aType> 
  [[deprecated("Use getValue(const ShortKey& sk) or getValue(const std::string& alias, const std::string& key) instead.")]]
  aType getValue(const std::string& key) const
  {
    aType returnValue = 0;
    ShortKey sk = { "*", key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      std::istringstream iss(it->second.front().c_str(), std::istringstream::in);
      iss >> returnValue;
    } else {
      issueKeyError(sk);
    }
    return returnValue;
  }

  template <class aType>
  aType getValue(const std::string& alias, const std::string& key) const
  {
    aType returnValue = 0;
    ShortKey sk = { alias, key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      std::istringstream iss(it->second.front().c_str(), std::istringstream::in);
      iss >> returnValue;
    } else {
      issueKeyError(sk);
    }
    return returnValue;
  }

  template <class aType>
  std::vector<aType> getValueVector(const ShortKey& sk) const
  {
    aType returnValue = 0;
    std::vector<aType> returnVector;
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      for (auto & v : it->second) {
        std::istringstream iss(v.c_str(), std::istringstream::in);
        iss >> returnValue;
        returnVector.push_back(returnValue);
      }
    } else {
      issueKeyError(sk);
    }
    return returnVector;
  }
  
  template <class aType>
  [[deprecated("Use getValueVector(const ShortKey& sk) or getValueVector(const std::string& alias, const std::string& key) instead.")]]
  std::vector<aType> getValueVector(const std::string& key) const
  {
    aType returnValue = 0;
    std::vector<aType> returnVector;
    ShortKey sk = { "*", key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      for (auto & v : it->second) {
        std::istringstream iss(v.c_str(), std::istringstream::in);
        iss >> returnValue;
        returnVector.push_back(returnValue);
      }
    } else {
      issueKeyError(sk);
    }
    return returnVector;
  }
  
  template <class aType> std::vector<aType> getValueVector(const std::string& alias, const std::string& key) const
  {
    aType returnValue = 0;
    std::vector<aType> returnVector;
    ShortKey sk = { alias, key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      for (auto & v : it->second) {
        std::istringstream iss(v.c_str(), std::istringstream::in);
        iss >> returnValue;
        returnVector.push_back(returnValue);
      }
    } else {
      issueKeyError(sk);
    }
    return returnVector;
  }

  template <class aType,std::size_t N>
  std::array<aType,N> getValueArray(const ShortKey& sk) const
  {
    aType returnValue = 0;
    std::array<aType,N> returnArray;
    std::size_t i = 0;
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      for (auto & v : it->second) {
        std::istringstream iss(v.c_str(), std::istringstream::in);
        iss >> returnValue;
        returnArray[i++] = returnValue;
        if (i==N) break;
      }
    } else {
      issueKeyError(sk);
    }
    return returnArray;
  }

  template <class aType,std::size_t N>
  [[deprecated("Use getValueArray(const ShortKey& sk) or getValueArray(const std::string& alias, const std::string& key) instead.")]]
  std::array<aType,N> getValueArray(const std::string& key) const
  {
    aType returnValue = 0;
    std::array<aType,N> returnArray;
    std::size_t i = 0;
    ShortKey sk = { "*", key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      for (auto & v : it->second) {
        std::istringstream iss(v.c_str(), std::istringstream::in);
        iss >> returnValue;
        returnArray[i++] = returnValue;
        if (i==N) break;
      }
    } else {
      issueKeyError(sk);
    }
    return returnArray;
  }

  template <class aType,std::size_t N>
  std::array<aType,N> getValueArray(const std::string& alias, const std::string& key) const
  {
    aType returnValue = 0;
    std::array<aType,N> returnArray;
    std::size_t i = 0;
    ShortKey sk = { alias, key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      for (auto & v : it->second) {
        std::istringstream iss(v.c_str(), std::istringstream::in);
        iss >> returnValue;
        returnArray[i++] = returnValue;
        if (i==N) break;
      }
    } else {
      issueKeyError(sk);
    }
    return returnArray;
  }

  template <class aType>
  aType getDefaultValue(const ShortKey& sk, aType defaultValue) const
  {
    aType returnValue = defaultValue;
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      std::istringstream iss(it->second.front().c_str(), std::istringstream::in);
      iss >> returnValue;
    }
    return returnValue;
  }
  
  template <class aType>
  [[deprecated("Use getDefaultValue(const ShortKey& sk, aType defaultValue) or getDefaultValue(const std::string& alias, const std::string& key, aType defaultValue) instead.")]]
  aType getDefaultValue(const std::string& key, aType defaultValue) const
  {
    aType returnValue = defaultValue;
    ShortKey sk = { "*", key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      std::istringstream iss(it->second.front().c_str(), std::istringstream::in);
      iss >> returnValue;
    }
    return returnValue;
  }
  
  template <class aType>
  aType getDefaultValue(const std::string& alias, const std::string& key, aType defaultValue) const
  {
    aType returnValue = defaultValue;
    ShortKey sk = { alias, key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      std::istringstream iss(it->second.front().c_str(), std::istringstream::in);
      iss >> returnValue;
    }
    return returnValue;
  }
  
  std::string getValue(const ShortKey& sk) const
  {
  	std::string returnValue = std::string();
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      returnValue = it->second.front();
    } else {
      issueKeyError(sk);
    }
    return returnValue;
  }

  [[deprecated("Use getValue(const ShortKey& sk) or getValue(const std::string& alias, const std::string& key) instead.")]]
  std::string getValue(const std::string& key) const
  {
  	std::string returnValue = std::string();
    ShortKey sk = { "*", key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      returnValue = it->second.front();
    } else {
      issueKeyError(sk);
    }
    return returnValue;
  }
 
  std::string getValue(const std::string& alias, const std::string& key) const
  {
  	std::string returnValue = std::string();
    ShortKey sk = { alias, key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      returnValue = it->second.front();
    } else {
      issueKeyError(sk);
    }
    return returnValue;
  }
 
  std::string getValueByIndex(const ShortKey& sk, std::size_t idx) const
  {
  	std::string returnValue = std::string();
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      if (idx<it->second.size()) returnValue = it->second[idx];
     } else {
      issueKeyError(sk);
    }
    return returnValue;
  }
 
  [[deprecated("Use getValueByIndex(const ShortKey& sk, std::size_t idx) or getValueByIndex(const std::string& alias, const std::string& key, std::size_t idx) instead.")]]
  std::string getValueByIndex(const std::string& key, std::size_t idx) const
  {
  	std::string returnValue = std::string();
    ShortKey sk = { "*", key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      if (idx<it->second.size()) returnValue = it->second[idx];
     } else {
      issueKeyError(sk);
    }
    return returnValue;
  }
 
  std::string getValueByIndex(const std::string& alias, const std::string& key, std::size_t idx) const
  {
  	std::string returnValue = std::string();
    ShortKey sk = { alias, key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      if (idx<it->second.size()) returnValue = it->second[idx];
     } else {
      issueKeyError(sk);
    }
    return returnValue;
  }

  std::vector<std::string> getValueVector(const ShortKey& sk) const
  {
    std::vector<std::string> returnVector;
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      returnVector = it->second;
    } else {
      issueKeyError(sk);
    }
    return returnVector;
  }

  [[deprecated("Use getValueVector(const ShortKey& sk) or getValueVector(const std::string& alias, const std::string& key) instead.")]]
  std::vector<std::string> getValueVector(const std::string& key) const
  {
    std::vector<std::string> returnVector;
    ShortKey sk = { "*", key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      returnVector = it->second;
    } else {
      issueKeyError(sk);
    }
    return returnVector;
  }

  std::vector<std::string> getValueVector(const std::string& alias, const std::string& key) const
  {
    std::vector<std::string> returnVector;
    ShortKey sk = { alias, key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      returnVector = it->second;
    } else {
      issueKeyError(sk);
    }
    return returnVector;
  }

  std::string getDefaultValue(const ShortKey& sk, std::string defaultValue) const
  {
  	std::string returnValue = defaultValue;
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      returnValue = it->second.front();
    }
    return returnValue;
  }

  [[deprecated("Use getDefaultValue(const ShortKey& sk, std::string defaultValue) or getDefaultValue(const std::string& alias, const std::string& key, std::string defaultValue) instead.")]]
  std::string getDefaultValue(const std::string& key, std::string defaultValue) const
  {
  	std::string returnValue = defaultValue;
    ShortKey sk = { "*", key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      returnValue = it->second.front();
    }
    return returnValue;
  }

  std::string getDefaultValue(const std::string& alias, const std::string& key, std::string defaultValue) const
  {
  	std::string returnValue = defaultValue;
    ShortKey sk = { alias, key };
    storage_t::const_iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      returnValue = it->second.front();
    }
    return returnValue;
  }
  
  template <class aType> void setValue(const ShortKey& sk, aType value)
  {
    QVariant variant(value);
    storage_t::iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      std::vector<std::string> values;
      values.push_back(variant.toString().toStdString());
      it->second = values;
      emit valueChanged();
    } else {
      issueKeyError(sk);
    }
  }

  template <class aType>
  [[deprecated("Use setValue(const ShortKey& sk, aType value) or setValue(const std::string& alias, const std::string& key, aType value) instead.")]]
  void setValue(const std::string& key, aType value)
  {
    QVariant variant(value);
    ShortKey sk = { "*", key };
    storage_t::iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      std::vector<std::string> values;
      values.push_back(variant.toString().toStdString());
      it->second = values;
      emit valueChanged();
    } else {
      issueKeyError(sk);
    }
  }

  template <class aType> void setValue(const std::string& alias, const std::string& key, aType value)
  {
    QVariant variant(value);
    ShortKey sk = { alias, key };
    storage_t::iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      std::vector<std::string> values;
      values.push_back(variant.toString().toStdString());
      it->second = values;
      emit valueChanged();
    } else {
      issueKeyError(sk);
    }
  }

  template <class aType> void addValue(const ShortKey& sk, aType value)
  {
    QVariant variant(value);
    storage_t::iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      keyExistsError(sk);
    } else {
      std::vector<std::string> values;
      values.push_back(variant.toString().toStdString());
      
      ApplicationConfig::FullKey fk = { "", sk.alias, sk.key };
      
      keyvalueMap_[fk] = values;

      emit structureChanged();
      emit valueChanged();
    }
  }

  template <class aType> void addValue(const std::string& alias, const std::string& key, aType value)
  {
    QVariant variant(value);
    ShortKey sk = { alias, key };
    storage_t::iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      keyExistsError(sk);
    } else {
      std::vector<std::string> values;
      values.push_back(variant.toString().toStdString());

      ApplicationConfig::FullKey fk = { "", alias, key };

      keyvalueMap_[fk] = values;

      emit structureChanged();
      emit valueChanged();
    }
  }

  void setValueByIndex(const ShortKey& sk, std::size_t idx, std::string& value)
  {
    storage_t::iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      if (idx<it->second.size()) {
        it->second[idx] = value;
      	emit valueChanged();
      }
    } else {
      issueKeyError(sk);
    }
  }
 
  [[deprecated("Use setValueByIndex(const ShortKey& sk, std::string& value) or setValueByIndex(const std::string& alias, const std::string& key, std::string& value) instead.")]]
  void setValueByIndex(const std::string& key, std::size_t idx, std::string& value)
  {
    ShortKey sk = { "*", key };
    storage_t::iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      if (idx<it->second.size()) {
        it->second[idx] = value;
      	emit valueChanged();
      }
    } else {
      issueKeyError(sk);
    }
  }
 
  void setValueByIndex(const std::string& alias, const std::string& key, std::size_t idx, std::string& value)
  {
    ShortKey sk = { alias, key };
    storage_t::iterator it = keyvalueMap_.find(sk);
    if (it!=keyvalueMap_.end()) {
      if (idx<it->second.size()) {
        it->second[idx] = value;
      	emit valueChanged();
      }
    } else {
      issueKeyError(sk);
    }
  }

  void save();
  void saveAs(const std::string& filename, const std::string& alias);
  
  const storage_t& getKeyValueMap() { return keyvalueMap_; }
  
  std::vector<ShortKey> getKeys() {
  	std::vector<ShortKey> k;
  	for (storage_t::const_iterator it=keyvalueMap_.begin();
  	     it!=keyvalueMap_.end();
  	     ++it) {
  	  ShortKey sk = { it->first.alias, it->first.key };
      k.push_back(sk);
    }
    return k;
  }
  
signals:
  
  void structureChanged();
  void valueChanged();

protected:

  ApplicationConfig(QObject *parent);
  static ApplicationConfig* instance_;

  void issueKeyError(const ShortKey& sk) const;
  void keyExistsError(const ShortKey& sk) const;

  storage_t keyvalueMap_;
};

bool operator<(const ApplicationConfig::FullKey& k1, const ApplicationConfig::FullKey& k2);
bool operator<(const ApplicationConfig::FullKey& fk, const ApplicationConfig::ShortKey& sk);
bool operator<(const ApplicationConfig::ShortKey& sk, const ApplicationConfig::FullKey& fk);

template <>
std::string ApplicationConfig::getValue(const ApplicationConfig::ShortKey& sk) const;
template <>
[[deprecated("Use getValue(const ShortKey& sk) or getValue(const std::string& alias, const std::string& key) instead.")]]
std::string ApplicationConfig::getValue(const std::string& key) const;
template <>
std::string ApplicationConfig::getValue(const std::string& alias, const std::string& key) const;

template <>
QString ApplicationConfig::getValue(const ApplicationConfig::ShortKey& sk) const;
template <>
[[deprecated("Use getValue(const ShortKey& sk) or getValue(const std::string& alias, const std::string& key) instead.")]]
QString ApplicationConfig::getValue(const std::string& key) const;
template <>
QString ApplicationConfig::getValue(const std::string& alias, const std::string& key) const;

template <>
std::vector<std::string> ApplicationConfig::getValueVector(const ApplicationConfig::ShortKey& sk) const;
template <>
[[deprecated("Use getValueVector(const ShortKey& sk) or getValueVector(const std::string& alias, const std::string& key) instead.")]]
std::vector<std::string> ApplicationConfig::getValueVector(const std::string& key) const;
template <>
std::vector<std::string> ApplicationConfig::getValueVector(const std::string& alias, const std::string& key) const;

template <>
std::string ApplicationConfig::getDefaultValue(const ApplicationConfig::ShortKey& sk, std::string defaultValue) const;
template <>
[[deprecated("Use getDefaultValue(const ShortKey& sk, std::string defaultValue) or getDefaultValue(const std::string& alias, const std::string& key, std::string defaultValue) instead.")]]
std::string ApplicationConfig::getDefaultValue(const std::string& key, std::string defaultValue) const;
template <>
std::string ApplicationConfig::getDefaultValue(const std::string& alias, const std::string& key, std::string defaultValue) const;

template <>
int ApplicationConfig::getValue(const ApplicationConfig::ShortKey& sk) const;
template <>
[[deprecated("Use getValue(const ShortKey& sk) or getValue(const std::string& alias, const std::string& key) instead.")]]
int ApplicationConfig::getValue(const std::string& key) const;
template <>
int ApplicationConfig::getValue(const std::string& alias, const std::string& key) const;

template <>
std::vector<int> ApplicationConfig::getValueVector(const ApplicationConfig::ShortKey& sk) const;
template <>
[[deprecated("Use getValueVector(const ShortKey& sk) or getValueVector(const std::string& alias, const std::string& key) instead.")]]
std::vector<int> ApplicationConfig::getValueVector(const std::string& key) const;
template <>
std::vector<int> ApplicationConfig::getValueVector(const std::string& alias, const std::string& key) const;

template <>
int ApplicationConfig::getDefaultValue(const ApplicationConfig::ShortKey& sk, int defaultValue) const;
template <>
[[deprecated("Use getDefaultValue(const ShortKey& sk, int defaultValue) or getDefaultValue(const std::string& alias, const std::string& key, int defaultValue) instead.")]]
int ApplicationConfig::getDefaultValue(const std::string& key, int defaultValue) const;
template <>
int ApplicationConfig::getDefaultValue(const std::string& alias, const std::string& key, int defaultValue) const;

template <>
unsigned int ApplicationConfig::getValue(const ApplicationConfig::ShortKey& sk) const;
template <>
[[deprecated("Use getValue(const ShortKey& sk) or getValue(const std::string& alias, const std::string& key) instead.")]]
unsigned int ApplicationConfig::getValue(const std::string& key) const;
template <>
unsigned int ApplicationConfig::getValue(const std::string& alias, const std::string& key) const;

template <>
std::vector<unsigned int> ApplicationConfig::getValueVector(const ApplicationConfig::ShortKey& sk) const;
template <>
[[deprecated("Use getValueVector(const ShortKey& sk) or getValueVector(const std::string& alias, const std::string& key) instead.")]]
std::vector<unsigned int> ApplicationConfig::getValueVector(const std::string& key) const;
template <>
std::vector<unsigned int> ApplicationConfig::getValueVector(const std::string& alias, const std::string& key) const;

template <>
unsigned int ApplicationConfig::getDefaultValue(const ApplicationConfig::ShortKey& sk, unsigned int defaultValue) const;
template <>
[[deprecated("Use getDefaultValue(const ShortKey& sk, unsigned int defaultValue) or getDefaultValue(const std::string& alias, const std::string& key, unsigned int defaultValue) instead.")]]
unsigned int ApplicationConfig::getDefaultValue(const std::string& key, unsigned int defaultValue) const;
template <>
unsigned int ApplicationConfig::getDefaultValue(const std::string& alias, const std::string& key, unsigned int defaultValue) const;

template <>
void ApplicationConfig::setValue(const ApplicationConfig::ShortKey& sk, std::string value);
template <>
[[deprecated("Use setValue(const ShortKey& sk, std::string value) or setValue(const std::string& alias, const std::string& key, std::string value) instead.")]]
void ApplicationConfig::setValue(const std::string& key, std::string value);
template <>
void ApplicationConfig::setValue(const std::string& alias, const std::string& key, std::string value);

/** @} */

#endif // APPLICATIONCONFIG_H
